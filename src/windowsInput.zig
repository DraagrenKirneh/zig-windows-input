const std = @import("std");
const builtin = @import("builtin");
const assert = std.debug.assert;

const windows = std.os.windows;
const GetLastError = windows.kernel32.GetLastError;
const unexpectedError = windows.unexpectedError;
const UINT = windows.UINT;
const WINAPI = windows.WINAPI;
const DWORD = windows.DWORD;
const ULONG_PTR = windows.ULONG_PTR;
const WORD = windows.WORD;
const LONG = windows.LONG;

pub const VirtualKey = @import("virtualkeys.zig").VirtualKey;

/// https://learn.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-keybdinput
pub const KeyboardInput = extern struct {
  wVk: VirtualKey,
  wScan: WORD = 0,
  dwFlags: KeyboardEvent = .KeyDown,
  time: DWORD = 0,
  dwExtraInfo: ULONG_PTR = 0,
};

pub const KeyboardEvent = enum(DWORD) {
  KeyDown = 0x0000,
  /// If specified, the scan code was preceded by a prefix byte that has the value 0xE0 (224).
  ExtendedKey = 0x0001,

  /// If specified, the key is being released. If not specified, the key is being pressed.
  KeyUp = 0x0002,

  /// If specified, the system synthesizes a VK_PACKET keystroke. 
  /// The wVk parameter must be zero. 
  /// This flag can only be combined with the KEYEVENTF_KEYUP flag. 
  /// For more information, see the Remarks section.
  Unicode = 0x004,

  /// If specified, wScan identifies the key and wVk is ignored.
  Scancode = 0x0008,  
};

pub const MouseInput = extern struct {
  dx: LONG,
  dy: LONG,
  mouseData: DWORD, 
  dwFlags: MouseEvent,

  /// The time stamp for the event, in milliseconds. If this parameter is 0, the system will provide its own time stamp.
  time: DWORD,

  /// An additional value associated with the mouse event. An application calls GetMessageExtraInfo to obtain this extra information.
  dwExtraInfo: ULONG_PTR,
};

pub const MouseEvent = enum(DWORD) {
  Unset           = 0x0000,
  Move            = 0x0001,
  LeftDown        = 0x0002,
  LeftUp          = 0x0004,
  RightDown       = 0x0008,
  RightUp         = 0x0010,
  MiddleDown      = 0x0020,
  MiddleUp        = 0x0040,
  XbtnDown        = 0x0080,
  xbtnUp          = 0x0100,
  Wheel           = 0x0800,
  WheelHorizontal = 0x1000,
  MoveNoCoalesce  = 0x2000,
  VirtualDesk     = 0x4000,
  Absolute        = 0x8000,
};

/// https://learn.microsoft.com/en-us/windows/win32/api/winuser/ns-winuser-hardwareinput
pub const HardwareInput = extern struct {
  /// The message generated by the input hardware.
  uMsg: DWORD,

  /// The low-order word of the lParam parameter for uMsg.
  wParamL: WORD,

  /// The high-order word of the lParam parameter for uMsg.
  wParamH: WORD,
};

pub const Input = extern struct {
  type: InputType,
  value: Value,
  
  const Value = extern union {
    mi: MouseInput,
    ki: KeyboardInput,
    hi: HardwareInput,    
  };

  const Self = @This();

  pub fn initMouse(input: MouseInput) Self {
    return .{
      .type = .Mouse,
      .value = .{ .mi = input }
    };
  }

  pub fn initKeyboard(input: KeyboardInput) Self {
    return .{
      .type = .Keyboard,
      .value = .{ .ki = input }
    };
  }

  pub fn initHardware(input: HardwareInput) Self {
    return .{
      .type = .Hardware,
      .value = .{ .hi = input }
    };
  }
};

pub const InputType = enum(DWORD) {
  Mouse = 0,
  Keyboard = 1,
  Hardware = 2,
};

extern "user32" fn SendInput(cInputs: UINT, pInputs: [*c]const Input, cbSize: c_int) callconv(WINAPI) UINT;

pub fn sendInputs(inputs: []const Input) !usize {
    const count = SendInput(@intCast(UINT, inputs.len), inputs.ptr, @intCast(c_int, @sizeOf(Input)));
    if (count > 0) return @intCast(usize, count);
    return windows.unexpectedError(GetLastError());
}

pub fn sendInput(input: Input) !usize {
  var array: [1]Input = .{ input }; 
  return sendInputs(array[0..]);
}
